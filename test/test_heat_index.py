import sys
import unittest

import dask.array as da
import dask.distributed as dd
import numpy as np
import xarray as xr

# Import from directory structure if coverage test, or from installed
# packages otherwise
if "--cov" in str(sys.argv):
    from src.geocat.comp.heat_index import heat_index
else:
    from geocat.comp.heat_index import heat_index


class Test_heat_index(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataset(
                "heat_index_output.nc"
            )  # Generated by running ncl_tests/test_heat_index.ncl
        except:
            ncl_xr_gt = xr.open_dataset("test/test_heat_output.nc")

        # set up ground truths
        cls.ncl_gt_1 = np.asarray(ncl_xr_gt.hi1)
        cls.ncl_gt_2 = np.asarray(ncl_xr_gt.hi2)

        cls.t1 = np.array([104, 100, 92, 92, 86, 80, 80, 60, 30])
        cls.rh1 = np.array([55, 65, 60, 90, 90, 40, 75, 90, 50])

        cls.t2 = np.array([70, 75, 80, 85, 90, 95, 100, 105, 110, 115])
        cls.rh2 = np.array([10, 75, 15, 80, 65, 25, 30, 40, 50, 5])

        # make client to reference in subsequent tests
        # cls.client = dd.Client()

    def test_numpy_input(self):
        # print(heat_index(self.t2, self.rh2, True))
        # print(self.ncl_gt_2)
        assert np.allclose(heat_index(self.t1, self.rh1, False),
                           self.ncl_gt_1,
                           atol=0.005)

    def test_alt_coef(self):
        assert np.allclose(heat_index(self.t2, self.rh2, True),
                           self.ncl_gt_2,
                           atol=0.005)

    def test_float_input(self):
        assert np.allclose(heat_index(80, 75, False), 83.5751, atol=0.005)

    def test_list_input(self):
        assert np.allclose(heat_index(self.t1.tolist(), self.rh1.tolist()),
                           self.ncl_gt_1,
                           atol=0.005)

    def test_xarray_input(self):
        t = xr.DataArray(self.t1)
        rh = xr.DataArray(self.rh1)

        assert np.allclose(heat_index(t, rh), self.ncl_gt_1, atol=0.005)

    def test_input_dimensions(self):
        self.assertRaises(ValueError, heat_index,
                          np.arange(4).reshape(2, 2),
                          np.arange(4).reshape(2, 2))

    def test_rh_warning(self):
        self.assertWarns(UserWarning, heat_index, [50, 80, 90], [0.1, 0.2, 0.5])

    def test_rh_valid(self):
        self.assertRaises(ValueError, heat_index, [50, 80, 90], [-1, 101, 50])
